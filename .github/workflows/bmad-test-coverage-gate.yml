name: BMAD Test Coverage Gate

on:
  pull_request:
    types: [opened, synchronize]
  push:
    branches: [master, main, develop]
  workflow_dispatch:

env:
  PROJECT_NUMBER: 2
  OWNER: caioniehues
  BACKEND_COVERAGE_THRESHOLD: 80
  FRONTEND_COVERAGE_THRESHOLD: 70
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  backend-test-coverage:
    name: Backend Test Coverage Check
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.title, 'backend') || contains(github.event.pull_request.title, 'Story-1') || contains(github.event.pull_request.title, 'Story-2')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 25
        uses: actions/setup-java@v4
        with:
          java-version: '25'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Run tests with coverage
        working-directory: backend
        run: |
          ./mvnw clean test jacoco:report

          # Extract coverage percentage
          COVERAGE=$(grep -oP 'Total.*?(\d+)%' target/site/jacoco/index.html | grep -oP '\d+' | tail -1)
          echo "coverage=$COVERAGE" >> $GITHUB_ENV
          echo "Backend test coverage: $COVERAGE%"

      - name: Update Test Coverage in Project Board
        if: github.event_name == 'pull_request'
        run: |
          # Get issue number from PR
          ISSUE_NUMBER=$(gh pr view ${{ github.event.pull_request.number }} --json number --jq '.number')

          # Get project item ID
          ITEM_ID=$(gh api graphql -f query='
            query {
              repository(owner: "${{ env.OWNER }}", name: "${{ github.event.repository.name }}") {
                issue(number: '$ISSUE_NUMBER') {
                  projectItems(first: 10) {
                    nodes {
                      id
                      project {
                        number
                      }
                    }
                  }
                }
              }
            }' --jq '.data.repository.issue.projectItems.nodes[] | select(.project.number == ${{ env.PROJECT_NUMBER }}) | .id' 2>/dev/null || echo "")

          if [ -n "$ITEM_ID" ]; then
            PROJECT_ID="PVT_kwHOA_Xhjc4BDod6"
            TEST_COVERAGE_FIELD="PVTF_lAHOA_Xhjc4BDod6zg1fs50"

            # Update Test Coverage %
            gh api graphql -f query='
              mutation {
                updateProjectV2ItemFieldValue(input: {
                  projectId: "'$PROJECT_ID'"
                  itemId: "'$ITEM_ID'"
                  fieldId: "'$TEST_COVERAGE_FIELD'"
                  value: { number: '${{ env.coverage }}' }
                }) {
                  projectV2Item { id }
                }
              }'
          fi

      - name: Check coverage threshold
        run: |
          if [ "${{ env.coverage }}" -lt "${{ env.BACKEND_COVERAGE_THRESHOLD }}" ]; then
            echo "❌ Backend test coverage (${{ env.coverage }}%) is below threshold (${{ env.BACKEND_COVERAGE_THRESHOLD }}%)"
            exit 1
          else
            echo "✅ Backend test coverage (${{ env.coverage }}%) meets threshold"
          fi

      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const coverage = ${{ env.coverage }};
            const threshold = ${{ env.BACKEND_COVERAGE_THRESHOLD }};
            const emoji = coverage >= threshold ? '✅' : '❌';
            const status = coverage >= threshold ? 'PASSES' : 'FAILS';

            const comment = `## ${emoji} Backend Test Coverage: ${coverage}%

            **Status**: ${status} (threshold: ${threshold}%)

            ${coverage < threshold ? '### ⚠️ Action Required\nPlease add more tests to meet the BMAD requirement of ' + threshold + '% coverage for backend code.' : '### 🎉 Coverage requirement met!'}

            View detailed report: \`backend/target/site/jacoco/index.html\``;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  frontend-test-coverage:
    name: Frontend Test Coverage Check
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.title, 'frontend') || contains(github.event.pull_request.title, 'flutter') || contains(github.event.pull_request.title, 'Story-1.2')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.4'
          channel: 'stable'

      - name: Install dependencies
        working-directory: frontend
        run: flutter pub get

      - name: Run tests with coverage
        working-directory: frontend
        run: |
          flutter test --coverage

          # Calculate coverage percentage
          TOTAL_LINES=$(lcov --list coverage/lcov.info | grep "Total:" | awk '{print $2}')
          COVERED_LINES=$(lcov --list coverage/lcov.info | grep "Total:" | awk '{print $4}')

          if [ -n "$TOTAL_LINES" ] && [ "$TOTAL_LINES" -gt 0 ]; then
            COVERAGE=$((COVERED_LINES * 100 / TOTAL_LINES))
          else
            COVERAGE=0
          fi

          echo "coverage=$COVERAGE" >> $GITHUB_ENV
          echo "Frontend test coverage: $COVERAGE%"

      - name: Update Test Coverage in Project Board
        if: github.event_name == 'pull_request'
        run: |
          # Similar to backend, update the project board field
          ISSUE_NUMBER=$(gh pr view ${{ github.event.pull_request.number }} --json number --jq '.number')

          ITEM_ID=$(gh api graphql -f query='
            query {
              repository(owner: "${{ env.OWNER }}", name: "${{ github.event.repository.name }}") {
                issue(number: '$ISSUE_NUMBER') {
                  projectItems(first: 10) {
                    nodes {
                      id
                      project {
                        number
                      }
                    }
                  }
                }
              }
            }' --jq '.data.repository.issue.projectItems.nodes[] | select(.project.number == ${{ env.PROJECT_NUMBER }}) | .id' 2>/dev/null || echo "")

          if [ -n "$ITEM_ID" ]; then
            PROJECT_ID="PVT_kwHOA_Xhjc4BDod6"
            TEST_COVERAGE_FIELD="PVTF_lAHOA_Xhjc4BDod6zg1fs50"

            gh api graphql -f query='
              mutation {
                updateProjectV2ItemFieldValue(input: {
                  projectId: "'$PROJECT_ID'"
                  itemId: "'$ITEM_ID'"
                  fieldId: "'$TEST_COVERAGE_FIELD'"
                  value: { number: '${{ env.coverage }}' }
                }) {
                  projectV2Item { id }
                }
              }'
          fi

      - name: Check coverage threshold
        run: |
          if [ "${{ env.coverage }}" -lt "${{ env.FRONTEND_COVERAGE_THRESHOLD }}" ]; then
            echo "❌ Frontend test coverage (${{ env.coverage }}%) is below threshold (${{ env.FRONTEND_COVERAGE_THRESHOLD }}%)"
            exit 1
          else
            echo "✅ Frontend test coverage (${{ env.coverage }}%) meets threshold"
          fi

      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const coverage = ${{ env.coverage }};
            const threshold = ${{ env.FRONTEND_COVERAGE_THRESHOLD }};
            const emoji = coverage >= threshold ? '✅' : '❌';
            const status = coverage >= threshold ? 'PASSES' : 'FAILS';

            const comment = `## ${emoji} Frontend Test Coverage: ${coverage}%

            **Status**: ${status} (threshold: ${threshold}%)

            ${coverage < threshold ? '### ⚠️ Action Required\nPlease add more tests to meet the BMAD requirement of ' + threshold + '% coverage for frontend code.' : '### 🎉 Coverage requirement met!'}

            View detailed report: \`frontend/coverage/lcov-report/index.html\``;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  update-review-status:
    name: Update Review Status Based on Coverage
    runs-on: ubuntu-latest
    needs: [backend-test-coverage, frontend-test-coverage]
    if: always() && github.event_name == 'pull_request'

    steps:
      - name: Update Review Status in Project
        run: |
          ISSUE_NUMBER=$(gh pr view ${{ github.event.pull_request.number }} --json number --jq '.number')

          ITEM_ID=$(gh api graphql -f query='
            query {
              repository(owner: "${{ env.OWNER }}", name: "${{ github.event.repository.name }}") {
                issue(number: '$ISSUE_NUMBER') {
                  projectItems(first: 10) {
                    nodes {
                      id
                      project {
                        number
                      }
                    }
                  }
                }
              }
            }' --jq '.data.repository.issue.projectItems.nodes[] | select(.project.number == ${{ env.PROJECT_NUMBER }}) | .id' 2>/dev/null || echo "")

          if [ -n "$ITEM_ID" ]; then
            PROJECT_ID="PVT_kwHOA_Xhjc4BDod6"
            REVIEW_STATUS_FIELD="PVTSSF_lAHOA_Xhjc4BDod6zg1fs6E"

            # Get Review Status options
            REVIEW_OPTIONS=$(gh api graphql -f query='
              {
                node(id: "'$PROJECT_ID'") {
                  ... on ProjectV2 {
                    field(name: "Review Status") {
                      ... on ProjectV2SingleSelectField {
                        options { id, name }
                      }
                    }
                  }
                }
              }' --jq '.data.node.field.options')

            # Determine status based on test results
            if [ "${{ needs.backend-test-coverage.result }}" == "success" ] || [ "${{ needs.frontend-test-coverage.result }}" == "success" ]; then
              STATUS_ID=$(echo "$REVIEW_OPTIONS" | jq -r '.[] | select(.name | contains("Code Review")) | .id')
              echo "Tests passed, setting Review Status to Code Review"
            else
              STATUS_ID=$(echo "$REVIEW_OPTIONS" | jq -r '.[] | select(.name | contains("Changes Requested")) | .id')
              echo "Tests failed, setting Review Status to Changes Requested"
            fi

            # Update Review Status
            gh api graphql -f query='
              mutation {
                updateProjectV2ItemFieldValue(input: {
                  projectId: "'$PROJECT_ID'"
                  itemId: "'$ITEM_ID'"
                  fieldId: "'$REVIEW_STATUS_FIELD'"
                  value: { singleSelectOptionId: "'$STATUS_ID'" }
                }) {
                  projectV2Item { id }
                }
              }'
          fi