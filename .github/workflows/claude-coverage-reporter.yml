name: Claude Coverage Reporter

on:
  pull_request:
    types: [opened, synchronize]
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  coverage-analysis:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      checks: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v5
        with:
          java-version: '25'
          distribution: 'temurin'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.4'

      - name: Run Backend Tests with Coverage
        working-directory: backend
        run: |
          ./mvnw clean test jacoco:report
          echo "BACKEND_COVERAGE=$(grep -oP '(?<=<counter type="LINE" missed="\d+" covered=")\d+' target/site/jacoco/jacoco.xml | head -1)" >> $GITHUB_ENV

      - name: Run Frontend Tests with Coverage
        working-directory: frontend
        run: |
          flutter pub get
          flutter test --coverage
          echo "FRONTEND_COVERAGE=$(lcov --summary coverage/lcov.info | grep -oP '\d+\.\d+%' | head -1)" >> $GITHUB_ENV

      - name: Analyze Coverage with Claude
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          prompt: |
            Analyze test coverage and provide a comprehensive report.

            ## Coverage Requirements:
            - Backend: 80% minimum (90% for auth/security)
            - Frontend: 70% minimum (80% for business logic)

            ## Coverage Analysis Tasks:

            1. **Coverage Metrics**
               - Backend coverage: ${{ env.BACKEND_COVERAGE }}
               - Frontend coverage: ${{ env.FRONTEND_COVERAGE }}
               - Compare against requirements
               - Identify if PR reduces coverage

            2. **Uncovered Code Analysis**
               - Read coverage reports from:
                 - backend/target/site/jacoco/index.html
                 - frontend/coverage/lcov.info
               - Identify critical uncovered paths
               - List files with lowest coverage
               - Highlight untested new code

            3. **Test Quality Assessment**
               - Check if tests follow TDD patterns
               - Verify Given-When-Then structure
               - Look for test smells (large tests, unclear names)
               - Check for commented or skipped tests

            4. **Risk Assessment**
               - Identify high-risk uncovered code:
                 - Authentication/authorization
                 - Payment/financial calculations
                 - Data validation
                 - Error handling
               - Prioritize what needs testing most

            5. **Recommendations**
               - Suggest specific test cases to add
               - Identify integration test gaps
               - Recommend refactoring for testability
               - Note areas needing mocking/stubbing

            ## Report Format:

            ### üìä Coverage Summary
            - Overall status: ‚úÖ PASS / ‚ùå FAIL
            - Backend: X% (requirement: 80%)
            - Frontend: X% (requirement: 70%)
            - Trend: ‚Üë improving / ‚Üì declining / ‚Üí stable

            ### üî¥ Critical Gaps
            List files/methods with no coverage that are high risk

            ### üü° Areas for Improvement
            List files below threshold but not critical

            ### ‚úÖ Well-Tested Areas
            Acknowledge good coverage areas

            ### üìù Actionable Next Steps
            Specific test cases to write

            For PRs: Use `gh pr comment` to post report
            For main branch: Create issue if coverage drops

            If coverage fails requirements:
            - Set check status to failure
            - Block PR merge
            - Provide specific guidance to meet requirements

          claude_args: '--allowed-tools "Bash(gh pr comment:*),Bash(gh issue create:*),Bash(gh pr checks:*)"'